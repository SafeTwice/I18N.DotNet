name: Build, Test & Publish

on:
  workflow_dispatch:  # Allow running the workflow manually from the GitHub UI
    inputs:
      publish_docs:
        description: 'Publish documentation'
        type: boolean
        required: false
        default: false
      publish_docs_as_stable:
        description: 'Publish documentation as stable'
        type: boolean
        required: false
        default: false
      analyze:
        description: 'Perform analysis'
        type: boolean
        required: false
        default: false
  push: # Run the workflow when pushing to the main branch
  pull_request: 
    types: [ opened, reopened, synchronize ] # Run the workflow for all pull requests
  release:
    types: [ published ]  # Run the workflow when a new GitHub release is published
    
env:
  PROJECT_NAME: I18N.DotNet
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NUGET_DIR: ${{ github.workspace }}/nuget
  DOCS_DIR: ${{ github.workspace }}/docs
    
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Restore dependencies
        run: dotnet restore
      - name: Patch source documentation
        run: |
          $LineBeforeAbout = ( Get-Content README.md | Select-String -Pattern "^## About" | Select-Object -First 1 ).LineNumber - 1
          ( Get-Content README.md | Select-Object -Skip $LineBeforeAbout ) | Set-Content README.md
          $LineBeforeFullApiDocs = ( Get-Content README.md | Select-String -Pattern "^## Full API Documentation" | Select-Object -First 1 ).LineNumber - 1
          ( Get-Content README.md | Select-Object -First $LineBeforeFullApiDocs ) | Set-Content README.md
      - name: Build
        run: dotnet build --no-restore -c Release
      - name: Test
        run: dotnet test --no-build --verbosity normal -c Release -p:CollectCoverage=true -p:CoverletOutputFormat=lcov -p:CoverletOutput=Coverage/
      - name: Pack
        run: dotnet pack --no-build --verbosity normal -c Release -o ${{ env.NUGET_DIR }}
      - name: Upload NuGets
        uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NUGET_DIR }}/*.nupkg
      - name: Publish coverage results
        uses: coverallsapp/github-action@v2.2.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          format: lcov
          files: Lib.Test/Coverage/coverage.net8.0.info Tool.Test/Coverage/coverage.info

  validate-nuget:
    runs-on: windows-latest
    needs: [ build ]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Install Meziantou NuGet validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global
      - name: Download NuGets
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_DIR }}
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NUGET_DIR }}/*.nupkg") --excluded-rule-ids 32

  analyze:
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' || github.event_name == 'release' || inputs.analyze
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Restore dependencies
        run: dotnet restore
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
      - name: Build
        run: dotnet build --no-restore -c Release
      - name: CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:csharp"

  publish-nuget:
    if: github.event_name == 'release'
    runs-on: windows-latest
    needs: [ validate-nuget, analyze ]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Download NuGets
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_DIR }}
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NUGET_DIR }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }

  generate-docs:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Chekout
        uses: actions/checkout@v4
      - name: Patch source documentation
        run: |
          awk -i inplace 'BEGIN {p=0}; NR<3 {print}; /^## About/ {p=1}; /^## Full API Documentation/ {p=0}; p==1 {print}' README.md
          sed -i "3i Documentation in PDF format is available [here](./${{ env.PROJECT_NAME }}.pdf)." README.md
      - name: Set library version in documentation
        env:
          PUBLISH_DOCS_STABLE: ${{ ( github.ref_type == 'tag' || inputs.publish_docs_as_stable ) && 'true' || 'false' }}
        run: |
          LIB_VERSION=${GITHUB_REF_NAME//\//-}
          if [[ $LIB_VERSION =~ ^[[:digit:]] ]]; then
            LIB_VERSION='v'$LIB_VERSION
          fi
          if [[ $PUBLISH_DOCS_STABLE == "false" ]]; then
            LIB_VERSION=$LIB_VERSION'@'${GITHUB_SHA:0:6}
          fi
          echo LIB_VERSION = $LIB_VERSION
          sed -i -E 's/(PROJECT_NUMBER\s*=) \w*/\1 '$LIB_VERSION'/' Lib/docs/Doxyfile
      - name: Generate documentation using Doxygen
        uses: mattnotmitt/doxygen-action@v1.9.5
        with:
          working-directory: Lib/
          doxyfile-path: docs/Doxyfile
          enable-latex: true
      - name: Copy PDF documentation
        run: sudo cp Lib/latex/refman.pdf Lib/html/${{ env.PROJECT_NAME }}.pdf
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs
          if-no-files-found: error
          retention-days: 7
          path: Lib/html

  publish-docs:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release' || inputs.publish_docs || inputs.publish_docs_as_stable
    runs-on: ubuntu-latest
    needs: [ generate-docs ]
    steps:
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: ${{ env.DOCS_DIR }}
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.DOCS_DIR }}
          destination_dir: ${{ github.ref_name }}

  update-stable-docs:
    if: github.event_name == 'release' || inputs.publish_docs_as_stable
    runs-on: ubuntu-latest
    needs: [ publish-docs ]
    steps:
      - name: Chekout
        uses: actions/checkout@v4
        with:
          ref: gh-pages
      - name: Redirect stable to new release
        run: ln -sf $GITHUB_REF_NAME stable
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: stable
          message: 'Update stable documentation to ${{ github.ref_name }}'
          push: true
